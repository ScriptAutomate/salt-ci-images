# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# The amazon-ami data block is generated from your amazon builder source_ami_filter; a data
# from this block can be referenced in source and locals blocks.
# Read the documentation for data blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/data
# Read the documentation for the Amazon AMI Data Source here:
# https://www.packer.io/plugins/datasources/amazon/ami
data "amazon-ami" "autogenerated_1" {
  filters = {
    name                = "${var.ami_filter}"
    root-device-type    = "ebs"
    state               = "available"
    virtualization-type = "hvm"
  }
  most_recent = true
  owners      = ["801119661308"]
  region      = "${var.aws_region}"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
# 4 errors occurred upgrading the following block:
# unhandled "upper" call:
# there is no way to automatically upgrade the "upper" call.
# Please manually upgrade to `upper(var.example)`
# Visit https://www.packer.io/docs/templates/hcl_templates/functions/string/upper for more infos.

# unhandled "upper" call:
# there is no way to automatically upgrade the "upper" call.
# Please manually upgrade to `upper(var.example)`
# Visit https://www.packer.io/docs/templates/hcl_templates/functions/string/upper for more infos.

# unhandled "upper" call:
# there is no way to automatically upgrade the "upper" call.
# Please manually upgrade to `upper(var.example)`
# Visit https://www.packer.io/docs/templates/hcl_templates/functions/string/upper for more infos.

# unhandled "upper" call:
# there is no way to automatically upgrade the "upper" call.
# Please manually upgrade to `upper(var.example)`
# Visit https://www.packer.io/docs/templates/hcl_templates/functions/string/upper for more infos.
source "amazon-ebs" "autogenerated_1" {
  ami_description = "{{ upper `${var.build_type}` }} Image of ${var.os_name} ${var.os_version} ${var.os_arch}"
  ami_groups      = ["all"]
  ami_name        = "${var.ami_name_prefix}/${var.build_type}/${var.ami_name_suffix}/${legacy_isotime("2006-01-02-15-04-05")}"
  communicator    = "winrm"
  instance_type   = "${var.instance_type}"
  region          = "${var.aws_region}"
  run_tags = {
    Name              = "Packer {{ upper `${var.build_type}` }} ${var.os_name} ${var.os_version} ${var.os_arch} Builder"
    Owner             = "SRE"
    Salt-Golden-Image = true
    created-by        = "packer"
  }
  source_ami = "${data.amazon-ami.autogenerated_1.id}"
  tags = {
    Build-Date           = "${timestamp()}"
    Build-Type           = "{{ upper `${var.build_type}` }}"
    Name                 = "{{ upper `${var.build_type}` }} // ${var.os_name} ${var.os_version} ${var.os_arch}"
    OS-Arch              = "${var.os_arch}"
    OS-Name              = "${var.os_name}"
    OS-Version           = "${var.os_version}"
    Owner                = "SRE"
    Promoted             = false
    Provision-State-Name = "${var.state_name}"
    Salt-Golden-Image    = true
    created-by           = "packer"
  }
  user_data_file = "${var.user_data_file}"
  winrm_insecure = true
  winrm_use_ssl  = true
  winrm_username = "Administrator"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "powershell" {
    script = "os-images/AWS/windows/scripts/Install-Git.ps1"
  }

  provisioner "powershell" {
    elevated_password = ""
    elevated_user     = "SYSTEM"
    script            = "os-images/AWS/windows/scripts/InstallAndConfigureOpenSSH.ps1"
  }

  provisioner "shell-local" {
    environment_vars = ["SALT_PR=${var.salt_pr}", "DISTRO_SLUG=${var.distro_slug}", "SALT_ROOT_DIR=${var.salt_provision_root_dir}"]
    script           = "os-images/AWS/files/prep-windows.sh"
  }

  provisioner "powershell" {
    script = "os-images/AWS/files/update-git-path.ps1"
  }

  provisioner "powershell" {
    elevated_password = ""
    elevated_user     = "SYSTEM"
    environment_vars  = ["OS_ARCH=${var.os_arch}", "SALT_VERSION=${var.salt_provision_version}", "SALT_PY_VERSION=${var.salt_provision_python_version}", "SALT_PY_TARGET_DIR=C:\\salt", "SALT_ROOT_DIR=${var.salt_provision_root_dir}"]
    script            = "os-images/AWS/windows/scripts/Install-Salt.ps1"
  }

  provisioner "file" {
    destination = "${var.salt_provision_root_dir}"
    direction   = "upload"
    generated   = true
    source      = ".tmp/${var.distro_slug}/"
  }

  provisioner "powershell" {
    elevated_password = ""
    elevated_user     = "SYSTEM"
    environment_vars  = ["SALT_PY_VERSION=${var.salt_provision_python_version}", "SALT_PY_TARGET_DIR=C:\\salt", "SALT_ROOT_DIR=${var.salt_provision_root_dir}", "SALT_STATE=${var.state_name}"]
    script            = "os-images/AWS/windows/scripts/Provision-System.ps1"
  }

  provisioner "powershell" {
    elevated_password = ""
    elevated_user     = "SYSTEM"
    environment_vars  = ["SALT_VERSION=${var.salt_provision_version}", "SALT_PY_TARGET_DIR=C:\\salt"]
    script            = "os-images/AWS/windows/scripts/Uninstall-Salt.ps1"
  }

  provisioner "powershell" {
    environment_vars = ["SALT_ROOT_DIR=${var.salt_provision_root_dir}"]
    inline           = ["Remove-Item $Env:SALT_ROOT_DIR -Recurse -Force", "Remove-Item c:\\salt -Recurse -Force"]
    pause_before     = "5s"
  }

  provisioner "powershell" {
    elevated_password = ""
    elevated_user     = "SYSTEM"
    inline            = ["Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced' -Name 'Hidden' -Value 1", "Set-Itemproperty -path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced' -Name 'HideFileExt' -value 0"]
  }

  provisioner "powershell" {
    script = "os-images/AWS/windows/scripts/SysPrep.ps1"
  }

  provisioner "shell-local" {
    command      = "echo Done"
    pause_before = "5s"
  }

  post-processor "manifest" {
    custom_data = {
      ami_name = "${var.ami_name_prefix}/${var.build_type}/${var.ami_name_suffix}"
    }
    output     = "manifest.json"
    strip_path = true
  }
}
